#include <stdio.h>
#include <stdlib.h>

struct stack
{
	int key;
	struct stack *next;
};

struct stack *head = NULL;
struct stack *top = NULL;

void main()
{
	void push(int);
	int pop();
	int stack_full();
	int stack_empty();

	struct stack *temp = NULL;
	int choice = 0, input = 0;

	while (1)
	{
		printf("1.Push 2.Pop 3.Exit\n");
		scanf_s("%d", &choice);
		if (choice == 1)
		{
			if (stack_full() == -1)
				printf("Stack is full\n");
			else
			{
				printf("Insert integer : ");
				scanf_s("%d", &input);
				push(input);
			}
		}
		else if (choice == 2)
		{
			if (stack_empty() == -1)
				printf("Stack is empty\n");
			else
				printf("Popped integer : %d\n", pop());
		}
		else if (choice == 3)
			break;
	}
}

void push(int ip)
{
	struct stack *temp = (struct stack*)malloc(sizeof(struct stack));
	
	temp->key = ip;
	temp->next = NULL;
	
	if ((head == NULL) && (top == NULL))
	{
		head = temp;
		top = temp;
	}
	else
	{
		top->next = temp;
		top = temp;
	}
}
int pop()
{
	int pop_temp = 0;
	struct stack *previous = NULL;
	struct stack *current = head;
	
	if (head == top)
	{
		pop_temp = top->key;
		free(current);
		head = NULL;
		top = NULL;
	}

	else
	{
		while (current != NULL)
		{
			if (current == top)
				break;

			previous = current;
			current = current->next;
		}

		pop_temp = top->key;
		top = previous;
		top->next = NULL;
		free(current);
	}
	return pop_temp;
}
int stack_full()
{
	struct stack *test = (struct stack *)malloc(sizeof(struct stack *));
	
	if (test == NULL)
		return -1;
	else
	{
		free(test);
		return 0;
	}
}
int stack_empty()
{
	if ((head == NULL) && (top == NULL))
		return -1;
	else
		return 0;
}
